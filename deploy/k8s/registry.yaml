# Note: The mcp-seed-data ConfigMap is created by the setup.sh script
# from the actual mcp-registry/data/seed.json file content
# This ensures we get the real 893 servers, not an empty array

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-registry-config
  namespace: mcp-registry
data:
  MCP_REGISTRY_SERVER_ADDRESS: ":8080"
  MCP_REGISTRY_DATABASE_URL: "postgres://postgres:password@postgres:5432/mcp-registry?sslmode=disable"
  MCP_REGISTRY_ENABLE_ANONYMOUS_AUTH: "true"
  MCP_REGISTRY_ENABLE_REGISTRY_VALIDATION: "false"
  MCP_REGISTRY_JWT_PRIVATE_KEY: "bb2c6b424005acd5df47a9e2c87f446def86dd740c888ea3efb825b23f7ef47c"
  MCP_REGISTRY_VERSION: "dev-k8s"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-registry
  namespace: mcp-registry
  labels:
    app: mcp-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-registry
  template:
    metadata:
      labels:
        app: mcp-registry
    spec:
      # Init container to wait for database
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgres -p 5432 -U postgres; do
            echo "PostgreSQL is not ready yet. Waiting..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          value: "password"
      
      containers:
      # Main MCP Registry container
      - name: registry
        image: ghcr.io/modelcontextprotocol/registry:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: MCP_REGISTRY_SERVER_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_SERVER_ADDRESS
        - name: MCP_REGISTRY_DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_DATABASE_URL
        - name: MCP_REGISTRY_ENABLE_ANONYMOUS_AUTH
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_ENABLE_ANONYMOUS_AUTH
        - name: MCP_REGISTRY_ENABLE_REGISTRY_VALIDATION
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_ENABLE_REGISTRY_VALIDATION
        - name: MCP_REGISTRY_JWT_PRIVATE_KEY
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_JWT_PRIVATE_KEY
        - name: MCP_REGISTRY_VERSION
          valueFrom:
            configMapKeyRef:
              name: mcp-registry-config
              key: MCP_REGISTRY_VERSION
        livenessProbe:
          httpGet:
            path: /v0/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /v0/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      
      # Nginx sidecar for read-only access
      - name: nginx-readonly
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: readonly-http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        livenessProbe:
          httpGet:
            path: /v0/health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v0/health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-readonly-config

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-registry
  namespace: mcp-registry
  labels:
    app: mcp-registry
spec:
  selector:
    app: mcp-registry
  ports:
  - name: readonly-api
    port: 80
    targetPort: 80
    protocol: TCP
  - name: full-api
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-registry-readonly
  namespace: mcp-registry
  labels:
    app: mcp-registry
    service-type: readonly
spec:
  selector:
    app: mcp-registry
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: NodePort